ActionView::Base.module_eval do
  protected
    ##
    # Appends the given class to the class list already in the options hash.
    #
    # ==== Parameters
    # options<Hash>::
    #   The options hash passed to the text_field or password_field method.
    # klass<String>::
    #   The CSS class to add to the class list. This will be either 'text' or 'password'.
    def append_class_to_options(options, klass)
      if options[:class].blank?
        options[:class] = klass
      else
        options[:class] += ' ' + klass
      end
    end
end

ActionView::Helpers::FormHelper.module_eval do
  alias :old_text_field :text_field
  alias :old_password_field :password_field
  
  ##
  # ==== Parameters
  # object_name<String>::
  #   The name of the object this input field with modify (passed on to the default text_field
  #   method).
  # method<String>::
  #   The method of the object this input field gets its value from (passed on to the default
  #   text_field method).
  # options<Hash>::
  #   The options hash passed to the text_field method.
  # ==== Returns
  # String::
  #   A input tag of type text, generated by the default text_field method, with the CSS 'text'
  #   class.
  def text_field(object_name, method, options = {})
    append_class_to_options(options, 'text')
    old_text_field(object_name, method, options)
  end
  
  ##
  # ==== Parameters
  # object_name<String>::
  #   The name of the object this input field with modify (passed on to the default text_field
  #   method).
  # method<String>::
  #   The method of the object this input field gets its value from (passed on to the default
  #   text_field method).
  # options<Hash>::
  #   The options hash passed to the text_field method.
  # ==== Returns
  # String::
  #   A input tag of type text, generated by the default text_field method, with the CSS 'password'
  #   class.
  def password_field(object_name, method, options = {})
    append_class_to_options(options, 'password')
    old_password_field(object_name, method, options)
  end
end

ActionView::Helpers::FormTagHelper.module_eval do
  alias :old_text_field_tag :text_field_tag
  
  ##
  # ==== Parameters
  # name<String>::
  #   The name of the object this input field with modify (passed on to the default text_field_tag
  #   method).
  # value<~to_s>::
  #   The value of this input field.
  # options<Hash>::
  #   The options hash passed to the text_field_tag method.
  # ==== Returns
  # String::
  #   A input tag of type text, generated by the default text_field method, with the CSS 'text'
  #   class.
  def text_field_tag(name, value = nil, options = {})
    append_class_to_options(options, 'text')
    old_text_field_tag(name, value, options)
  end
end